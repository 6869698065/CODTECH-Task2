module uart_rx (
    input wire clk,       // System clock
    input wire reset,     // System reset
    input wire rx,        // UART receive line
    output reg [7:0] rx_data, // Received data
    output reg rx_done    // Reception complete
);

    parameter BAUD_RATE = 9600;
    parameter CLK_FREQ = 50000000;
    localparam BAUD_PERIOD = CLK_FREQ / BAUD_RATE;
    localparam HALF_BAUD_PERIOD = BAUD_PERIOD / 2;

    reg [12:0] baud_counter = 0;
    reg [3:0] bit_counter = 0;
    reg [7:0] rx_shift_reg = 0;
    reg rx_active = 0;
    reg [1:0] rx_sync = 0;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            baud_counter <= 0;
            bit_counter <= 0;
            rx_shift_reg <= 0;
            rx_active <= 0;
            rx_done <= 0;
            rx_sync <= 2'b11;
        end else begin
            rx_sync <= {rx_sync[0], rx};
            if (!rx_sync[1] && rx_sync[0] && !rx_active) begin
                rx_active <= 1;
                baud_counter <= HALF_BAUD_PERIOD;
                bit_counter <= 0;
                rx_done <= 0;
            end else if (rx_active) begin
                if (baud_counter < BAUD_PERIOD - 1) begin
                    baud_counter <= baud_counter + 1;
                end else begin
                    baud_counter <= 0;
                    case (bit_counter)
                        4'b0000: ; // Start bit, do nothing
                        4'b1001: begin
                            rx_active <= 0;
                            rx_done <= 1;
                            rx_data <= rx_shift_reg;
                        end
                        default: rx_shift_reg[bit_counter - 1] <= rx_sync[1];
                    endcase
                    bit_counter <= bit_counter + 1;
                end
end
        end
    end
endmodule
